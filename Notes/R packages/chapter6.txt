6.4 R software package related to GHD
Rmetrics: R language package suite for financial engineering and computational finance, focusing on financial modeling, risk management, asset pricing, time series analysis, and more. It mainly consists of several R packages, including:
• fBasics (Financial Statistics)
• fPortfolio (Portfolio Optimization)
• fAssets (Asset Modeling)
• fOptions (Option Pricing)
• fGarch (GARCH Time Series Modeling)
• timeSeries (Time series data processing)
• fImport (Data Import)
• fExtremes (Modeling Extreme Events)
• fRegression (regression analysis)
Different distribution models: Density function values, probabilities, quantiles and generating random numbers.
                               Density function (starts with d), distribution function (starts with p), quantile function (starts with q) and random number generation (starts with r)
Robust Estimator: An estimator that is insensitive to extreme values. e.g.mean, median, IQR, MAD ( MAD = \text{median}(|X_i - \text{median}(X)|) ), Spearman Rank Correlation.
NIG: Normal Inverse Gaussian Distribution, a special case of the Generalized Hyperbolic (GH) distributions. Heavy-tailed and skewed distributions,self-decomposable,Modeling of financial time series.
f(x | \alpha, \beta, \delta, \mu) = \frac{\alpha \delta K_1(\alpha \sqrt{\delta^2 + (x - \mu)^2})}{\pi \sqrt{\delta^2 + (x - \mu)^2}} e^{\delta \sqrt{\alpha^2 - \beta^2} + \beta (x - \mu)}
•	\alpha &gt;  0 steepness of the control distribution
• \beta control skewness of distribution
•	\delta &gt;  0 scale of control distribution
• \mu is a location parameter


About GHD
fBasics: 
ghSlider(), hypSlider(), nigSlider() 
Financial market yield data: foofit(); mode:fooMode(); moments: fooMean(), fooVar(),fooSkew(), fooKurt(); Robust correspondence：fooMED(), fooIQR(),fooSKEW(), fooKURT(); (foo: abbreviation corresponding to gh,ght,hyp,nig, etc.
Unknown parameters of the estimated distribution：In relation to fitting NIG, ML principle, general method of moments, maximum product distance or variance product spacing, nigShapeTriangle().
nlminb():Minimize the negative logarithmic likelihood function
//The fit() methods all return an object of the (formal clas)FDISTFIT class, where the show() function can be displayed.

GeneralizedHyperbolic:
description: Computing and fitting functions for generalized hypergeometric distributions (GH), hypergeometric distributions (HYP), generalized inverse Gaussian distributions (GIG), and partial Laplacian distributions.
Core functions
• Density, distribution function, quantile, random number generation of GH, HYP and GIG distributions
• Parameter estimation and fitting
• Statistical moment calculation (mean, variance, skewness, kurtosis)
• Model evaluation (Q-Q chart, P-P chart)
• Cramer-von-Mises goodness of fit test
(1) Basic distribution function
These functions are used to calculate the density of GH, HYP, GIG distributions, cumulative distribution functions, quantiles, and random numbers:
• dghyp()/dhypeb()/dgig() - Calculate density function (PDF)
pghyp()/phyperb()/pgig() - Calculate cumulative distribution function (CDF)
• qghyp()/qhyperb()/qgig() - Calculates quantiles
rghyp()/rhyperb()/rgig() - Generates random numbers
(2) Parameter calculation and conversion
ghypCalcRange()/hyperbCalcRange() - Calculates the probabilistic mass range of the distribution
• ghypChangePars()/hyperbChangePars() - Converts GH/HYP parameters
• ghypCheckPars() - Checks whether the GH parameter is valid
• hyperbBreaks() - Determines the interval of HYP probabilities and quantiles
(3) Statistical moment calculation
• ghyperbMean()/hyperbMean() - mean value
• ghyperbVar()/hyperbVar() - variance
ghyperbSkew()/hyperbSkew() - skewness
• ghyperbKurt()/hyperbKurt() - kurtosis
• ghypMom() - Calculates the moment of the GH distribution
(4) Distribution fitting
• hyperFit() - Fits the HYP distribution
• ghypFit() - Fits GH distribution
• gigFit() - Fits the GIG distribution
• perfFitStart() - Sets the initial parameters of the fit
• coef()/vcov() - Gets the covariance matrix for the estimated parameters
(5) Evaluation and visualization
• qqghyp()/qqhyperb() - Draw Q-Q graph
ppghyp()/pphyperb() - Draw P-P plots
• hyperbCvMTest() -Cramer-von-Mises goodness of fit test

QRM:
description:Mainly used in financial risk management, it provides fitting methods for generalized hypergeometric distribution (GH), normal inverse Gaussian distribution (NIG), Hypergeometric distribution (HYP) and generalized inverse Gaussian distribution (GIG), and supports extreme value theory (EVT) analysis.
Core functions
• Fitting GH, NIG, HYP and GIG distributions
Extreme Value Theory (EVT)
• Risk measurement calculation (VaR, ES)
• Moment Estimation
• Parameter optimization (based on ML estimation)
(1) Distribution fitting
• fit.NIH() - Fits the NIG or HYP distribution
• Mnh() - Used for parameter fitting
• EGIG() - Calculates the moment of the GIG distribution
• ElogGIG() - Calculates the logarithmic moment of the GIG distribution
(2) Generate random numbers
• Rgig() - Generates a GIG distribution random variable
(3) Others
• nlminb() - Minimizes the log-likelihood function
• summary()/print() - Returns information about the fit object

SkewHyperbolic:
Used to model and fit skew hyperbolic distributions for skew data.
 Core functions
• Density, distribution function, quantile, random number generation
• Skew hyperbolic distribution parameter estimation
• Distribution fitting
• Model evaluation (Q-Q chart, P-P chart)
(1) Basic distribution function
• dskewhyp() - Density function (PDF)
• pskewhyp() - Cumulative Distribution function (CDF)
• qskewhyp() - quantile
• rskewhyp() - Generates random numbers
(2) Parameter calculation and conversion
• ddskewhyp() - first derivative
• skewhypBreaks() - Calculates the interval of the distribution
• skewhypCalcRange() - Calculates a probabilistic mass range
• skewhypCheckPars() - Checks the validity of the parameter
(3) Statistical moment calculation
• skewhypMean() - The mean
• skewhypVar() - variance
• skewhypSkew() - skewness
• skewhypKurt() - kurtosis
• skewhypMode() - Calculates the mode
(4) Distribution fitting
• skewhypFit() - Fits a skew hyperbolic distribution
• skewhypFitStart() - Sets initial parameters
optim()/nlm() - minimizes the likelihood function
print()/plot()/summary() - Fit object analysis
(5) Evaluation and visualization
• qqskewhyp() - Draw a Q-Q graph
• ppskewhyp() - Draw a P-P graph

 VarianceGamma:
description: SkewHyperbolic is an extension of the Skewhyperbolic package, specifically for variance gamma (VG) distributions, which can be used for options pricing, financial market volatility modeling.
Core functions
• VG distribution density, distribution function, quantile, random number generation
• Parameter estimation
• VG distribution fitting
• Statistical moment calculation (mean, variance, skewness, kurtosis)
• Q-Q chart and P-P chart are used for model evaluation
Classification of main functions
(1) Basic distribution function
• dvg() - Density function (PDF)
• pvg() - Cumulative Distribution Function (CDF)
• qvg() - quantile
• rvg() - Generates random numbers
(2) Parameter calculation
• vgMean() - mean value
• vgVar() - variance
• vgSkew() - skewness
• vgKurt() - Kurtosis
(3) Distribution fitting
• vgFit() - Fits VG distribution
• vgFitStart() - Sets initial parameters
optim()/nlm() - minimizes the likelihood function
print()/plot()/summary() - Fit object analysis
(4) Evaluation and visualization
• qqvg() - Draw Q-Q graph
• ppvg() - Draw a P-P diagram


6.5 About GLD
Davies:
description: mainly used in the implementation of the Davies quantile function, but also deals with the Generalized Lambda Distribution (GLD). GLD can be used to model non-normally distributed data and is widely used in finance, statistics and engineering.
 Core functions
• Handle the Davies quantile function
Calculate the density, distribution function, quantile, and random number generation of the GLD distribution
• Calculate the expected value of the GLD
• Provide numerical integration method for approximate calculation
(1) Basic distribution function
dgld() - Calculate the density function of the GLD distribution (PDF)
pgld() - Compute the cumulative distribution function (CDF) of the GLD distribution
• qgld() - Calculates the quantile of the GLD distribution
• rgld() - Generates random numbers for the GLD distribution
(2) Calculate the expected value of GLD
• Expect.gld () - Calculates the expected value of GLD
approx() - Approximate values are computed using numerical integration methods

fBasics:
description: Including density, distribution, quantile and random number generation.
Core functions
• Calculate the density, distribution function, quantile and random number of the GLD distribution
• Fit the GLD distribution
• Estimate GLD parameters
• Provide optimization methods for parameters such as maximum likelihood estimation (MLE)
• Calculate the mode, median, interquartile distance, skewness and kurtosis of the GLD
Classification of main functions
(1) Basic distribution function
• dgld() - Calculates the GLD density
pgld() - Calculates the cumulative distribution of GLD
• qgld() - Calculates the GLD quantile
• rgld() - Generates GLD random numbers
(2) GLD distribution fitting
• gldFit() - Fits the GLD distribution
• Expect.gld () - Calculate the expected value of GLD
• nlminb() - Fits the GLD using optimization methods
• fdISTFIT() - The object where the fit results are stored
(3) Statistical moment calculation
• gldMode() - Calculates the GLD mode
• gldMED() - Calculates the median GLD
• gldIQR() - Calculates the GLD quartile distance
• gldSKEW() - Calculates GLD skew
• gldKURT() - calculates GLD kurtosis
(4) Evaluate the fitting effect
• hist() - Plots the histogram of the GLD fit
• goF() - Calculates GLD goodness of fit
• ad/cvM/ks-Anderson-Darling, Cramer-von-Mises and Kolmogorov-Smirnov statistical tests
fdISTFIT() - Stores GLD fit objects and can be used for fit evaluation
(5) Histogram box division method
• fd/scott/Sturges-freedman-Diaconis rules, Scott rules, Sturges rules

gld:
Core functions
• Calculate the density, distribution function, quantile and random number of the GLD distribution
GLD parameter estimation (using adaptive grid search and optimization method)
• Fit the GLD distribution
• GLD compatibility check
• Q-Q plots are drawn for fit evaluation
Classification of main functions
(1) Basic distribution function
dgl() - Calculates the density of the GLD distribution
• dgld() - Calculates the quantile density of the GLD distribution
• dpl() - Calculates the GLD distribution function
• qdgl() - Calculates the GLD quantile
• rgl() - Generates GLD random numbers
(2) Parameter estimation
• starship() - Parameter optimization using adaptive grid search
• optim() - Further optimization of parameters
• gl.check.lambda() - Checks the rationality of the GLD parameters
(3) Evaluation and visualization
• qqgld() - Draw Q-Q graph
• plotgl() - Plots the GLD density function
• plot(), print(), summary() - View the fit results

lmomco:
description: Provides a statistical method based on L-moments for parameter estimation of GLD distributions and supports probability-weighted moment (PWM) estimation.
Core functions
• Calculate L-moment and PWM moment
• Parameter estimation of GLD distribution based on L-moment method
• Parameter rationality test
• Calculate the cumulative distribution, quantile, and density function of GLD
• Generate GLD random numbers
• Evaluate the fit effect
 Classification of main functions
(1) L-moment calculation
• lmom.ub() - Calculates the unbiased L-moment
• TLmoms() - Calculate trim L-moments
• PWM.ub () - Calculate unbiased probability weighted moment (PWM)
• pwm2lmom() - PWM converted to L-moment
(2) GLD parameter estimation
• pargld()/parTlGld() - Calculates GLD parameters based on L-moments
• par.valid()/pargld.valid() - Checks the rationality of the parameters
• vec2par() - Converts the parameters to model parameters
• lmom2par() -L-moment converted to parameter
• lmomgl() - Calculates the L-moment representation of the GLD parameter
(3) Distribution function calculation
• cdfgld() - Calculates the GLD cumulative distribution
• quagld() - Calculates the GLD quantile
• pdfgld() - Calculates the GLD density function
• rlmomco() - Generates random numbers
(4) Evaluate the fitting effect
• check.fs() - Evaluate the fit method
• check.pdf() - Evaluates the density function



6.6 Application

6.7
这个 形状三角（Shape Triangle） 图用于分析 FTSE100 股票收益率的分布特征，特别是 尾部分布 和 对称性。它展示了股票收益率在 偏态（Skewness）和峰度（Kurtosis） 方面的特征。

1. 轴的含义
	•	横轴（￼）
	•	表示分布的左右偏斜程度：
	•	￼（右侧较长）：收益率分布 左偏（负偏态）
	•	￼（左侧较长）：收益率分布 右偏（正偏态）
	•	￼（中心）：收益率分布 对称
	•	纵轴（￼）
	•	表示收益率分布的 厚尾特性：
	•	￼（顶部区域）：收益率分布接近 正态分布，尾部较薄。
	•	￼（中部区域）：较厚尾（fat-tail），市场波动较大。
	•	￼（底部区域）：极端厚尾（heavy-tail），存在极端风险事件的可能性。

2. 关键观察
	1.	大多数股票位于 ￼ 区域：
	•	说明 大多数股票收益率的分布是左偏的，即极端负收益（暴跌）比极端正收益（暴涨）更常见。这符合金融市场的经验，因为股票价格通常在市场崩盘时跌得更快，而上涨相对较缓慢。
	2.	多数点聚集在 ￼ 之间：
	•	这

表明 FTSE100 股票收益率具有较厚尾分布（fat-tail），即收益率分布相比正态分布更加集中，但尾部更重。这意味着：
	•	市场波动较大，相比正态分布，更容易出现较大的正或负收益。
	•	极端事件（如股灾）发生的概率较高，即使在正常市场情况下，也可能有较大的市场波动。

	3.	极少数点出现在 ￼ 的区域：
	•	这些点代表 极端厚尾分布（heavy-tail），即某些股票的收益率可能存在更剧烈的波动，可能受到特定行业风险或公司风险的影响。
	4.	形状三角的边界：
	•	上边界（￼）：代表有限方差和有限峰度的分布（接近正态分布）。
	•	下边界（￼）：表示极端的无限方差分布（收益率分布的波动无界）。
	•	中心垂直线（￼）：表示收益率分布是对称的。

3. 结论

📌 市场主要表现为：
	•	收益率分布具有左偏（负偏态），意味着股价暴跌的可能性大于暴涨的可能性。
	•	大多数股票收益率呈现较厚尾特性（fat-tail），意味着市场波动较大，极端事件更容易发生。
	•	少数股票的收益率分布具有极端厚尾特性（heavy-tail），意味着这些股票的波动性更高，需要额外的风险管理。

📌 对投资者的影响：
	•	风险管理： 由于市场波动较大，风险管理工具（如 VaR、CVaR）比简单的方差更重要。
	•	投资策略： 需要考虑市场的 左偏 和 厚尾 特性，避免简单假设收益率服从正态分布。
	•	衍生品定价： 传统的 Black-Scholes 期权定价模型假设正态分布，但实际市场的厚尾特性可能需要更复杂的定价模型（如 Heston 模型）。

4. 形状三角的应用

形状三角是一种强大的工具，可以用来：
	•	比较不同市场（如美股 vs. 英股）的收益率分布特征。
	•	分析个别股票或行业的收益率分布，找到波动更大的股票。
	•	帮助风险管理，量化市场极端事件的可能性。

总结： 这张图揭示了 FTSE100 成分股收益率的形状特征，市场收益率呈现 左偏和厚尾特性，这意味着市场 暴跌的可能性大于暴涨，且收益率分布比正态分布更加不稳定。对于风险管理和投资策略，这一信息至关重要。


